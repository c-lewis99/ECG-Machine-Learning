{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1e5f3eb0",
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, LeakyReLU, BatchNormalization, Dropout, Flatten, MaxPooling1D, Conv1D, UpSampling1D, Conv1DTranspose\n",
    "# from keras.utils import plot_model\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "import pickle\n",
    "import wfdb\n",
    "from wfdb import processing\n",
    "import glob\n",
    "import imageio\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import os\n",
    "import PIL\n",
    "from tensorflow.keras import layers\n",
    "import time\n",
    "from keras.callbacks import History \n",
    "from keras.layers import Reshape\n",
    "from keras.layers import Dense, Activation, Flatten, Convolution1D, Dropout,MaxPooling1D,GlobalAveragePooling1D\n",
    "from keras import optimizers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "92b74609",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.6.0\n",
      "WARNING:tensorflow:From <ipython-input-2-d4f6dddfb96c>:5: is_gpu_available (from tensorflow.python.framework.test_util) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use `tf.config.list_physical_devices('GPU')` instead.\n",
      "GPU: False\n"
     ]
    }
   ],
   "source": [
    "from IPython import display\n",
    "\n",
    "print(tf.__version__)\n",
    "\n",
    "print(\"GPU:\", tf.test.is_gpu_available())\n",
    "if tf.test.is_gpu_available():\n",
    "    device_name = tf.test.gpu_device_name()\n",
    "\n",
    "else:\n",
    "    device_name = 'cpu:0'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7353a1b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "BATCH_SIZE=200\n",
    "def real_samples():  \n",
    "    Z = np.zeros(shape = (1,7))\n",
    "    X_real = np.loadtxt('X_norm_1000_samples.csv')\n",
    "    X=X_real.reshape((1000,200,1))\n",
    "\n",
    "    train_labels = np.ones((1000, 1))\n",
    "    train_dataset = tf.data.Dataset.from_tensor_slices(X).shuffle(10000).batch(BATCH_SIZE)\n",
    "   \n",
    "                                                  \n",
    "    return train_dataset, train_labels, X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ec87ee82",
   "metadata": {},
   "outputs": [],
   "source": [
    "def real_samples_sine():  \n",
    "    Z = np.zeros(shape = (1,7))\n",
    "    X=np.zeros((1000,200))\n",
    "    t=np.linspace(0,7,200)\n",
    "    \n",
    "    for i in range(1000):\n",
    "        X[i,:]=np.sin(2*t)\n",
    "        \n",
    "    X=X.reshape((1000,200,1))\n",
    "    train_labels = np.ones((1000, 1))\n",
    "    train_dataset = tf.data.Dataset.from_tensor_slices(X).shuffle(10000).batch(BATCH_SIZE)\n",
    "\n",
    "\n",
    "    return train_dataset, train_labels, X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b3fecb96",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_dataset, train_labels, plot_data = real_samples_sine()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "62472656",
   "metadata": {},
   "outputs": [],
   "source": [
    "plot_ex=plot_data[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1d339e30",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(plot_data[40])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5986a48a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def define_discriminator():\n",
    "    model = tf.keras.Sequential()\n",
    "   \n",
    "    model.add(layers.Input(shape=(200,1)))\n",
    "#     model.add(layers.Permute((2, 1)))\n",
    "    \n",
    "    model.add(layers.Conv1D(filters=32, kernel_size=16, strides=1, padding='same'))\n",
    "    model.add(layers.LeakyReLU())\n",
    "    model.add(tf.keras.layers.BatchNormalization())\n",
    "    model.add(layers.Dropout(0.4))\n",
    "\n",
    "    model.add(layers.Conv1D(filters=64, kernel_size=16, strides=1, padding='same'))\n",
    "    model.add(layers.LeakyReLU())\n",
    "    model.add(tf.keras.layers.BatchNormalization())\n",
    "    \n",
    "    model.add(layers.MaxPool1D(pool_size=2))\n",
    "\n",
    "    model.add(layers.Conv1D(filters=128, kernel_size=16, strides=1, padding='same'))\n",
    "    model.add(layers.LeakyReLU())\n",
    "    model.add(tf.keras.layers.BatchNormalization())\n",
    "    model.add(layers.Dropout(0.4))\n",
    "\n",
    "    model.add(layers.Conv1D(filters=256, kernel_size=16, strides=1, padding='same'))\n",
    "    model.add(layers.LeakyReLU())\n",
    "    model.add(tf.keras.layers.BatchNormalization())\n",
    "    model.add(layers.MaxPool1D(pool_size=2))\n",
    "    \n",
    "\n",
    "    model.add(layers.Flatten())\n",
    "    model.add(layers.Dense(1))\n",
    "\n",
    "    return model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a7ac6d33",
   "metadata": {},
   "outputs": [],
   "source": [
    "def define_generator():\n",
    "    model = tf.keras.Sequential()\n",
    "    model.add(layers.Input(shape=(50, 1)))\n",
    "\n",
    "    model.add(layers.Bidirectional(layers.LSTM(64, return_sequences=True)))\n",
    "\n",
    "    model.add(layers.Conv1D(filters=128, kernel_size=16, strides=1, padding='same'))\n",
    "    model.add(layers.LeakyReLU())\n",
    "    model.add(tf.keras.layers.BatchNormalization())\n",
    "  \n",
    "    model.add(layers.Conv1D(filters=64, kernel_size=16, strides=1, padding='same'))\n",
    "    model.add(layers.LeakyReLU())\n",
    "    model.add(tf.keras.layers.BatchNormalization())\n",
    "    \n",
    "    model.add(layers.UpSampling1D(2))\n",
    "    \n",
    "    model.add(layers.Conv1D(filters=32, kernel_size=16, strides=1, padding='same'))\n",
    "    model.add(layers.LeakyReLU())\n",
    "    \n",
    "    model.add(layers.Conv1D(filters=16, kernel_size=16, strides=1, padding='same'))\n",
    "    model.add(layers.LeakyReLU())\n",
    "    model.add(tf.keras.layers.BatchNormalization())\n",
    "    \n",
    "    model.add(layers.UpSampling1D(2))\n",
    "    \n",
    "    model.add(layers.Conv1D(filters=1, kernel_size=16, strides=1, padding='same', activation='tanh'))\n",
    "    \n",
    "#     model.add(layers.Permute((2, 1)))\n",
    "    \n",
    "    return model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "5395e832",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_2\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv1d_9 (Conv1D)            (None, 200, 32)           544       \n",
      "_________________________________________________________________\n",
      "leaky_re_lu_8 (LeakyReLU)    (None, 200, 32)           0         \n",
      "_________________________________________________________________\n",
      "conv1d_10 (Conv1D)           (None, 200, 64)           32832     \n",
      "_________________________________________________________________\n",
      "leaky_re_lu_9 (LeakyReLU)    (None, 200, 64)           0         \n",
      "_________________________________________________________________\n",
      "max_pooling1d_2 (MaxPooling1 (None, 100, 64)           0         \n",
      "_________________________________________________________________\n",
      "conv1d_11 (Conv1D)           (None, 100, 128)          131200    \n",
      "_________________________________________________________________\n",
      "leaky_re_lu_10 (LeakyReLU)   (None, 100, 128)          0         \n",
      "_________________________________________________________________\n",
      "conv1d_12 (Conv1D)           (None, 100, 256)          524544    \n",
      "_________________________________________________________________\n",
      "leaky_re_lu_11 (LeakyReLU)   (None, 100, 256)          0         \n",
      "_________________________________________________________________\n",
      "max_pooling1d_3 (MaxPooling1 (None, 50, 256)           0         \n",
      "_________________________________________________________________\n",
      "flatten_1 (Flatten)          (None, 12800)             0         \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 1)                 12801     \n",
      "=================================================================\n",
      "Total params: 701,921\n",
      "Trainable params: 701,921\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "Model: \"sequential_3\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "bidirectional_1 (Bidirection (None, 50, 128)           33792     \n",
      "_________________________________________________________________\n",
      "conv1d_13 (Conv1D)           (None, 50, 128)           262272    \n",
      "_________________________________________________________________\n",
      "leaky_re_lu_12 (LeakyReLU)   (None, 50, 128)           0         \n",
      "_________________________________________________________________\n",
      "conv1d_14 (Conv1D)           (None, 50, 64)            131136    \n",
      "_________________________________________________________________\n",
      "leaky_re_lu_13 (LeakyReLU)   (None, 50, 64)            0         \n",
      "_________________________________________________________________\n",
      "up_sampling1d_2 (UpSampling1 (None, 100, 64)           0         \n",
      "_________________________________________________________________\n",
      "conv1d_15 (Conv1D)           (None, 100, 32)           32800     \n",
      "_________________________________________________________________\n",
      "leaky_re_lu_14 (LeakyReLU)   (None, 100, 32)           0         \n",
      "_________________________________________________________________\n",
      "conv1d_16 (Conv1D)           (None, 100, 16)           8208      \n",
      "_________________________________________________________________\n",
      "leaky_re_lu_15 (LeakyReLU)   (None, 100, 16)           0         \n",
      "_________________________________________________________________\n",
      "up_sampling1d_3 (UpSampling1 (None, 200, 16)           0         \n",
      "_________________________________________________________________\n",
      "conv1d_17 (Conv1D)           (None, 200, 1)            257       \n",
      "=================================================================\n",
      "Total params: 468,465\n",
      "Trainable params: 468,465\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "discriminator_model = define_discriminator()\n",
    "discriminator_model.summary()\n",
    "generator_model = define_generator()\n",
    "generator_model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0df8de15",
   "metadata": {},
   "outputs": [],
   "source": [
    "cross_entropy = tf.keras.losses.BinaryCrossentropy(from_logits=True)\n",
    "\n",
    "def discriminator_loss(real_output, fake_output):\n",
    "    real_loss = cross_entropy(tf.ones_like(real_output), real_output)\n",
    "    fake_loss = cross_entropy(tf.zeros_like(fake_output), fake_output)\n",
    "\n",
    "    total_loss = real_loss + fake_loss\n",
    "    print(total_loss)\n",
    "    return total_loss\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "6851934f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def generator_loss(fake_output):\n",
    "    return cross_entropy(tf.ones_like(fake_output), fake_output)\n",
    "                         \n",
    "generator_optimizer = tf.keras.optimizers.RMSprop(learning_rate=0.00001)\n",
    "d_optimizer = tf.keras.optimizers.RMSprop(learning_rate=0.00001) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "9a0108fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "EPOCHS = 8000\n",
    "\n",
    "latent_dim = 1\n",
    "\n",
    "checkpoint_dir = './training_checkpoints'\n",
    "checkpoint_prefix = os.path.join(checkpoint_dir, \"ckpt\")\n",
    "checkpoint = tf.train.Checkpoint(generator_optimizer=generator_optimizer,\n",
    "                                 d_optimizer=d_optimizer,\n",
    "                                 generator=generator_model,\n",
    "                                 discriminator=discriminator_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "8dc1d6c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "number_epochs = []\n",
    "gen_loss_ = []\n",
    "disc_loss_ = []\n",
    "all_losses = []\n",
    "epoch_samples = []\n",
    "lambda_gp = 10.0\n",
    "def train(dataset, epochs):\n",
    "    print('Training')\n",
    "    start_time = time.time()\n",
    "    for epoch in range(epochs):\n",
    "        start = time.time()\n",
    "        epoch_losses = []\n",
    "        \n",
    "        for images in dataset:\n",
    "            images = tf.cast(images, tf.float32)\n",
    "            x_input = np.random.rand(latent_dim*50) #generate points in latent space\n",
    "            noise = x_input.reshape(1,50,latent_dim)\n",
    "\n",
    "\n",
    "            ######################################################################## \n",
    "\n",
    "            with tf.GradientTape() as gen_tape, tf.GradientTape() as d_tape:\n",
    "\n",
    "                for i in range(7):\n",
    "                    \n",
    "                    generated = generator_model(noise, training=True)\n",
    "                    real_output = discriminator_model(images, training=True)\n",
    "\n",
    "                    fake_output = discriminator_model(generated, training=True)\n",
    "\n",
    "                gen_loss = -tf.math.reduce_mean(fake_output)\n",
    "\n",
    "                d_loss_real = -tf.math.reduce_mean(real_output)\n",
    "                d_loss_fake =  tf.math.reduce_mean(fake_output)\n",
    "                d_loss = d_loss_real + d_loss_fake\n",
    "\n",
    "                with tf.GradientTape() as gp_tape:\n",
    "\n",
    "                    alpha = tf.random.uniform(\n",
    "                                shape=[real_output.shape[0], 1, 1], \n",
    "                                minval=0.0, maxval=1.0)\n",
    "\n",
    "\n",
    "                    interpolated = (alpha*images + (1-alpha)*generated)\n",
    "\n",
    "                    gp_tape.watch(interpolated)\n",
    "\n",
    "                    d_critics_intp = discriminator_model(interpolated)\n",
    "\n",
    "\n",
    "                    grads_intp = gp_tape.gradient(\n",
    "                            d_critics_intp, [interpolated,])[0]\n",
    "\n",
    "                    grads_intp_l2 = tf.sqrt(\n",
    "                            tf.reduce_sum(tf.square(grads_intp), axis=[1, 2]))\n",
    "\n",
    "                    grad_penalty = tf.reduce_mean(tf.square(grads_intp_l2 - 1.0))\n",
    "\n",
    "                    d_loss = d_loss + lambda_gp*grad_penalty\n",
    "\n",
    "                    d_grads = d_tape.gradient(d_loss, discriminator_model.trainable_variables)\n",
    "\n",
    "                    d_optimizer.apply_gradients(\n",
    "                        grads_and_vars=zip(d_grads, discriminator_model.trainable_variables))\n",
    "\n",
    "                    g_grads = gen_tape.gradient(gen_loss, generator_model.trainable_variables)\n",
    "\n",
    "                    generator_optimizer.apply_gradients(\n",
    "                        grads_and_vars=zip(g_grads, generator_model.trainable_variables))\n",
    "\n",
    "                    epoch_losses.append(\n",
    "                          (gen_loss.numpy(), d_loss.numpy(), \n",
    "                               d_loss_real.numpy(), d_loss_fake.numpy()))\n",
    "                    gen_loss_.append(gen_loss.numpy()) \n",
    "                    disc_loss_.append(d_loss.numpy())          \n",
    "                    all_losses.append(epoch_losses)\n",
    "                    number_epochs.append(epoch)\n",
    "                    print('Epoch {:-3d} | ET {:.2f} min | Avg Losses >>'\n",
    "                    ' G/D {:6.2f}/{:6.2f} [D-Real: {:6.2f} D-Fake: {:6.2f}]'\n",
    "                    .format(epoch, (time.time() - start_time)/60, \n",
    "                      *list(np.mean(all_losses[-1], axis=0)))\n",
    "                    )\n",
    "                    \n",
    "\n",
    "    # Save the model every 100 epochs\n",
    "        if (epoch+1) % 10 == 0:\n",
    "#             print('hhh')\n",
    "            x_input = np.random.rand(latent_dim*50) #generate points in latent space\n",
    "            noise = x_input.reshape(1,50,latent_dim)\n",
    "            #checkpoint.save(file_prefix = checkpoint_prefix)\n",
    "            predictions = generator_model(noise, training=False)\n",
    "\n",
    "\n",
    "            x = predictions.numpy()\n",
    "\n",
    "\n",
    "            c = np.array(range(200))\n",
    "            c = c.reshape(200, 1)\n",
    "            x = x.reshape(200,1)\n",
    "            X = np.hstack((c, x))\n",
    "#             print(X)\n",
    "            Y = np.hstack((c,plot_ex))\n",
    "            plt.plot(X[:,0], X[:,1], color = 'blue')\n",
    "\n",
    "            plt.plot(Y[:,0], Y[:,1], color = 'red')\n",
    "            plt.title('Epoch Number: {}'.format(epoch))\n",
    "            plt.xlabel('Time interval')\n",
    "            plt.ylabel('Normalised data value')\n",
    "            #plt.savefig(\"Images for GIF/Image_AFIB{}\".format(epoch))\n",
    "            plt.show()\n",
    "\n",
    "            plt.plot(number_epochs, gen_loss_, color = 'g', label = 'Gen loss')\n",
    "            plt.plot(number_epochs, disc_loss_, color = 'c', label = 'Disc loss')\n",
    "            plt.legend(loc=\"upper left\")\n",
    "            plt.xlabel('Epoch number')\n",
    "            plt.ylabel('Loss')\n",
    "            plt.show()\n",
    "\n",
    "    \n",
    "      \n",
    "      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "b4a17d6f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training\n",
      "Epoch   0 | ET 0.14 min | Avg Losses >> G/D   0.00/  8.66 [D-Real:  -0.02 D-Fake:  -0.00]\n",
      "Epoch   0 | ET 0.26 min | Avg Losses >> G/D   0.00/  8.63 [D-Real:  -0.03 D-Fake:  -0.00]\n",
      "Epoch   0 | ET 0.37 min | Avg Losses >> G/D   0.00/  8.59 [D-Real:  -0.04 D-Fake:  -0.00]\n",
      "Epoch   0 | ET 0.50 min | Avg Losses >> G/D   0.00/  8.54 [D-Real:  -0.04 D-Fake:  -0.00]\n",
      "Epoch   0 | ET 0.62 min | Avg Losses >> G/D   0.00/  8.51 [D-Real:  -0.05 D-Fake:  -0.00]\n",
      "Epoch   1 | ET 0.73 min | Avg Losses >> G/D   0.00/  8.33 [D-Real:  -0.10 D-Fake:  -0.00]\n",
      "Epoch   1 | ET 0.85 min | Avg Losses >> G/D   0.00/  8.28 [D-Real:  -0.11 D-Fake:  -0.00]\n",
      "Epoch   1 | ET 0.96 min | Avg Losses >> G/D   0.00/  8.25 [D-Real:  -0.12 D-Fake:  -0.00]\n",
      "Epoch   1 | ET 1.08 min | Avg Losses >> G/D   0.00/  8.22 [D-Real:  -0.13 D-Fake:  -0.00]\n",
      "Epoch   1 | ET 1.19 min | Avg Losses >> G/D   0.00/  8.20 [D-Real:  -0.13 D-Fake:  -0.00]\n",
      "Epoch   2 | ET 1.31 min | Avg Losses >> G/D  -0.00/  8.07 [D-Real:  -0.18 D-Fake:   0.00]\n",
      "Epoch   2 | ET 1.42 min | Avg Losses >> G/D  -0.00/  8.05 [D-Real:  -0.19 D-Fake:   0.00]\n",
      "Epoch   2 | ET 1.54 min | Avg Losses >> G/D  -0.00/  8.03 [D-Real:  -0.19 D-Fake:   0.00]\n",
      "Epoch   2 | ET 1.66 min | Avg Losses >> G/D  -0.00/  8.00 [D-Real:  -0.20 D-Fake:   0.00]\n",
      "Epoch   2 | ET 1.77 min | Avg Losses >> G/D  -0.00/  7.98 [D-Real:  -0.21 D-Fake:   0.00]\n",
      "Epoch   3 | ET 1.89 min | Avg Losses >> G/D  -0.00/  7.82 [D-Real:  -0.26 D-Fake:   0.00]\n",
      "Epoch   3 | ET 2.01 min | Avg Losses >> G/D  -0.00/  7.81 [D-Real:  -0.27 D-Fake:   0.00]\n",
      "Epoch   3 | ET 2.12 min | Avg Losses >> G/D  -0.01/  7.79 [D-Real:  -0.27 D-Fake:   0.01]\n",
      "Epoch   3 | ET 2.24 min | Avg Losses >> G/D  -0.01/  7.78 [D-Real:  -0.28 D-Fake:   0.01]\n",
      "Epoch   3 | ET 2.35 min | Avg Losses >> G/D  -0.01/  7.76 [D-Real:  -0.29 D-Fake:   0.01]\n",
      "Epoch   4 | ET 2.47 min | Avg Losses >> G/D  -0.01/  7.64 [D-Real:  -0.34 D-Fake:   0.01]\n",
      "Epoch   4 | ET 2.58 min | Avg Losses >> G/D  -0.01/  7.61 [D-Real:  -0.35 D-Fake:   0.01]\n",
      "Epoch   4 | ET 2.70 min | Avg Losses >> G/D  -0.01/  7.58 [D-Real:  -0.36 D-Fake:   0.01]\n",
      "Epoch   4 | ET 2.82 min | Avg Losses >> G/D  -0.01/  7.56 [D-Real:  -0.37 D-Fake:   0.01]\n",
      "Epoch   4 | ET 2.93 min | Avg Losses >> G/D  -0.01/  7.54 [D-Real:  -0.37 D-Fake:   0.01]\n",
      "Epoch   5 | ET 3.05 min | Avg Losses >> G/D  -0.02/  7.47 [D-Real:  -0.43 D-Fake:   0.02]\n",
      "Epoch   5 | ET 3.16 min | Avg Losses >> G/D  -0.02/  7.39 [D-Real:  -0.44 D-Fake:   0.02]\n",
      "Epoch   5 | ET 3.27 min | Avg Losses >> G/D  -0.02/  7.38 [D-Real:  -0.44 D-Fake:   0.02]\n",
      "Epoch   5 | ET 3.38 min | Avg Losses >> G/D  -0.02/  7.35 [D-Real:  -0.45 D-Fake:   0.02]\n",
      "Epoch   5 | ET 3.49 min | Avg Losses >> G/D  -0.02/  7.33 [D-Real:  -0.46 D-Fake:   0.02]\n",
      "Epoch   6 | ET 3.61 min | Avg Losses >> G/D  -0.03/  7.20 [D-Real:  -0.52 D-Fake:   0.03]\n",
      "Epoch   6 | ET 3.72 min | Avg Losses >> G/D  -0.03/  7.18 [D-Real:  -0.53 D-Fake:   0.03]\n",
      "Epoch   6 | ET 3.83 min | Avg Losses >> G/D  -0.03/  7.16 [D-Real:  -0.54 D-Fake:   0.03]\n",
      "Epoch   6 | ET 3.94 min | Avg Losses >> G/D  -0.03/  7.14 [D-Real:  -0.55 D-Fake:   0.03]\n",
      "Epoch   6 | ET 4.05 min | Avg Losses >> G/D  -0.03/  7.12 [D-Real:  -0.56 D-Fake:   0.03]\n",
      "Epoch   7 | ET 4.18 min | Avg Losses >> G/D  -0.04/  6.99 [D-Real:  -0.62 D-Fake:   0.04]\n",
      "Epoch   7 | ET 4.33 min | Avg Losses >> G/D  -0.04/  6.97 [D-Real:  -0.63 D-Fake:   0.04]\n",
      "Epoch   7 | ET 4.47 min | Avg Losses >> G/D  -0.04/  6.95 [D-Real:  -0.64 D-Fake:   0.04]\n",
      "Epoch   7 | ET 4.60 min | Avg Losses >> G/D  -0.04/  6.93 [D-Real:  -0.65 D-Fake:   0.04]\n",
      "Epoch   7 | ET 4.75 min | Avg Losses >> G/D  -0.04/  6.91 [D-Real:  -0.66 D-Fake:   0.04]\n",
      "Epoch   8 | ET 4.88 min | Avg Losses >> G/D  -0.05/  6.82 [D-Real:  -0.73 D-Fake:   0.05]\n",
      "Epoch   8 | ET 5.02 min | Avg Losses >> G/D  -0.04/  6.76 [D-Real:  -0.74 D-Fake:   0.04]\n",
      "Epoch   8 | ET 5.13 min | Avg Losses >> G/D  -0.04/  6.70 [D-Real:  -0.75 D-Fake:   0.04]\n",
      "Epoch   8 | ET 5.24 min | Avg Losses >> G/D  -0.04/  6.68 [D-Real:  -0.76 D-Fake:   0.04]\n",
      "Epoch   8 | ET 5.35 min | Avg Losses >> G/D  -0.05/  6.65 [D-Real:  -0.77 D-Fake:   0.05]\n",
      "Epoch   9 | ET 5.51 min | Avg Losses >> G/D  -0.05/  6.49 [D-Real:  -0.84 D-Fake:   0.05]\n",
      "Epoch   9 | ET 5.67 min | Avg Losses >> G/D  -0.05/  6.47 [D-Real:  -0.85 D-Fake:   0.05]\n",
      "Epoch   9 | ET 5.81 min | Avg Losses >> G/D  -0.05/  6.45 [D-Real:  -0.86 D-Fake:   0.05]\n",
      "Epoch   9 | ET 5.97 min | Avg Losses >> G/D  -0.05/  6.42 [D-Real:  -0.88 D-Fake:   0.05]\n",
      "Epoch   9 | ET 6.08 min | Avg Losses >> G/D  -0.05/  6.38 [D-Real:  -0.89 D-Fake:   0.05]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch  10 | ET 6.20 min | Avg Losses >> G/D  -0.05/  6.20 [D-Real:  -0.96 D-Fake:   0.05]\n",
      "Epoch  10 | ET 6.30 min | Avg Losses >> G/D  -0.06/  6.19 [D-Real:  -0.97 D-Fake:   0.06]\n",
      "Epoch  10 | ET 6.42 min | Avg Losses >> G/D  -0.06/  6.18 [D-Real:  -0.99 D-Fake:   0.06]\n",
      "Epoch  10 | ET 6.56 min | Avg Losses >> G/D  -0.06/  6.14 [D-Real:  -1.00 D-Fake:   0.06]\n",
      "Epoch  10 | ET 6.67 min | Avg Losses >> G/D  -0.06/  6.11 [D-Real:  -1.01 D-Fake:   0.06]\n",
      "Epoch  11 | ET 6.78 min | Avg Losses >> G/D  -0.04/  5.90 [D-Real:  -1.09 D-Fake:   0.04]\n",
      "Epoch  11 | ET 6.90 min | Avg Losses >> G/D  -0.05/  5.84 [D-Real:  -1.11 D-Fake:   0.05]\n",
      "Epoch  11 | ET 7.03 min | Avg Losses >> G/D  -0.05/  5.78 [D-Real:  -1.12 D-Fake:   0.05]\n",
      "Epoch  11 | ET 7.15 min | Avg Losses >> G/D  -0.05/  5.78 [D-Real:  -1.14 D-Fake:   0.05]\n",
      "Epoch  11 | ET 7.26 min | Avg Losses >> G/D  -0.05/  5.75 [D-Real:  -1.15 D-Fake:   0.05]\n",
      "Epoch  12 | ET 7.38 min | Avg Losses >> G/D  -0.05/  5.51 [D-Real:  -1.24 D-Fake:   0.05]\n",
      "Epoch  12 | ET 7.51 min | Avg Losses >> G/D  -0.05/  5.48 [D-Real:  -1.25 D-Fake:   0.05]\n",
      "Epoch  12 | ET 7.64 min | Avg Losses >> G/D  -0.05/  5.45 [D-Real:  -1.27 D-Fake:   0.05]\n",
      "Epoch  12 | ET 7.77 min | Avg Losses >> G/D  -0.05/  5.41 [D-Real:  -1.29 D-Fake:   0.05]\n",
      "Epoch  12 | ET 7.90 min | Avg Losses >> G/D  -0.04/  5.39 [D-Real:  -1.30 D-Fake:   0.04]\n",
      "Epoch  13 | ET 8.02 min | Avg Losses >> G/D  -0.04/  5.13 [D-Real:  -1.40 D-Fake:   0.04]\n",
      "Epoch  13 | ET 8.13 min | Avg Losses >> G/D  -0.04/  5.11 [D-Real:  -1.41 D-Fake:   0.04]\n",
      "Epoch  13 | ET 8.24 min | Avg Losses >> G/D  -0.04/  5.06 [D-Real:  -1.43 D-Fake:   0.04]\n",
      "Epoch  13 | ET 8.36 min | Avg Losses >> G/D  -0.04/  5.03 [D-Real:  -1.45 D-Fake:   0.04]\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-27-d152560ca122>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_dataset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mEPOCHS\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-26-03b32d941f6d>\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(dataset, epochs)\u001b[0m\n\u001b[1;32m     59\u001b[0m                     \u001b[0md_loss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0md_loss\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mlambda_gp\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mgrad_penalty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 61\u001b[0;31m                     \u001b[0md_grads\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0md_tape\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgradient\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0md_loss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdiscriminator_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrainable_variables\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     62\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m                     d_optimizer.apply_gradients(\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/tensorflow/python/eager/backprop.py\u001b[0m in \u001b[0;36mgradient\u001b[0;34m(self, target, sources, output_gradients, unconnected_gradients)\u001b[0m\n\u001b[1;32m   1082\u001b[0m                           for x in nest.flatten(output_gradients)]\n\u001b[1;32m   1083\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1084\u001b[0;31m     flat_grad = imperative_grad.imperative_grad(\n\u001b[0m\u001b[1;32m   1085\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_tape\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1086\u001b[0m         \u001b[0mflat_targets\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/tensorflow/python/eager/imperative_grad.py\u001b[0m in \u001b[0;36mimperative_grad\u001b[0;34m(tape, target, sources, output_gradients, sources_raw, unconnected_gradients)\u001b[0m\n\u001b[1;32m     69\u001b[0m         \"Unknown value for unconnected_gradients: %r\" % unconnected_gradients)\n\u001b[1;32m     70\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 71\u001b[0;31m   return pywrap_tfe.TFE_Py_TapeGradient(\n\u001b[0m\u001b[1;32m     72\u001b[0m       \u001b[0mtape\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_tape\u001b[0m\u001b[0;34m,\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     73\u001b[0m       \u001b[0mtarget\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/tensorflow/python/eager/backprop.py\u001b[0m in \u001b[0;36m_gradient_function\u001b[0;34m(op_name, attr_tuple, num_inputs, inputs, outputs, out_grads, skip_input_indices, forward_pass_name_scope)\u001b[0m\n\u001b[1;32m    157\u001b[0m       \u001b[0mgradient_name_scope\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mforward_pass_name_scope\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m\"/\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    158\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname_scope\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgradient_name_scope\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 159\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mgrad_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmock_op\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mout_grads\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    160\u001b[0m   \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    161\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mgrad_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmock_op\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mout_grads\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/tensorflow/python/ops/nn_grad.py\u001b[0m in \u001b[0;36m_Conv2DGrad\u001b[0;34m(op, grad)\u001b[0m\n\u001b[1;32m    579\u001b[0m   \u001b[0;31m# in Eager mode.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    580\u001b[0m   return [\n\u001b[0;32m--> 581\u001b[0;31m       gen_nn_ops.conv2d_backprop_input(\n\u001b[0m\u001b[1;32m    582\u001b[0m           \u001b[0mshape_0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    583\u001b[0m           \u001b[0mop\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/tensorflow/python/ops/gen_nn_ops.py\u001b[0m in \u001b[0;36mconv2d_backprop_input\u001b[0;34m(input_sizes, filter, out_backprop, strides, padding, use_cudnn_on_gpu, explicit_paddings, data_format, dilations, name)\u001b[0m\n\u001b[1;32m   1238\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mtld\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_eager\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1239\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1240\u001b[0;31m       _result = pywrap_tfe.TFE_Py_FastPathExecute(\n\u001b[0m\u001b[1;32m   1241\u001b[0m         \u001b[0m_ctx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Conv2DBackpropInput\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_sizes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilter\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout_backprop\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1242\u001b[0m         \u001b[0;34m\"strides\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstrides\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"use_cudnn_on_gpu\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muse_cudnn_on_gpu\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"padding\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "train(train_dataset, EPOCHS)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d3821c10",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30bfa8fb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
